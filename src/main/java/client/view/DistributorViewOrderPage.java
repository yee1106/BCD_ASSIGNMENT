/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package client.view;

import model.ComfirmOrder;
import model.ConfirmShipping;
import model.Order;
import model.ReadyShippingDetails;
import util.*;

import javax.swing.*;
import java.io.ByteArrayOutputStream;
import java.io.ObjectOutputStream;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import static client.Main.*;

/**
 *
 * @author yeech
 */
public class DistributorViewOrderPage extends javax.swing.JFrame {

    /**
     * Creates new form DistributorViewOrderPage
     */

    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

    public DistributorViewOrderPage() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        statusTrackTextArea = new javax.swing.JTextArea();
        goBackLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        infoTextArea = new javax.swing.JTextArea();
        verifySignatureButton = new javax.swing.JButton();
        acceptOrderButton = new javax.swing.JButton();
        declineOrderButton = new javax.swing.JButton();
        updateTrackingButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 204, 255));
        jLabel1.setText("Shipment Track");

        statusTrackTextArea.setEditable(false);
        statusTrackTextArea.setColumns(20);
        statusTrackTextArea.setFont(new java.awt.Font("Monospaced", 0, 16)); // NOI18N
        statusTrackTextArea.setForeground(new java.awt.Color(255, 102, 102));
        statusTrackTextArea.setRows(5);
        jScrollPane1.setViewportView(statusTrackTextArea);

        goBackLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        goBackLabel.setForeground(new java.awt.Color(153, 255, 255));
        goBackLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/goBackIcon.png"))); // NOI18N
        goBackLabel.setText("Go back");
        goBackLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        goBackLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                goBackLabelMouseReleased(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(204, 255, 255));
        jLabel2.setText("Track");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 153, 153));
        jLabel3.setText("Info");

        infoTextArea.setEditable(false);
        infoTextArea.setColumns(20);
        infoTextArea.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        infoTextArea.setForeground(new java.awt.Color(51, 51, 255));
        infoTextArea.setRows(5);
        jScrollPane2.setViewportView(infoTextArea);

        verifySignatureButton.setBackground(new java.awt.Color(102, 102, 255));
        verifySignatureButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        verifySignatureButton.setText("Verify Signature");
        verifySignatureButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verifySignatureButtonActionPerformed(evt);
            }
        });

        acceptOrderButton.setBackground(new java.awt.Color(51, 255, 51));
        acceptOrderButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        acceptOrderButton.setText("Accept Order");
        acceptOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptOrderButtonActionPerformed(evt);
            }
        });

        declineOrderButton.setBackground(new java.awt.Color(255, 102, 102));
        declineOrderButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        declineOrderButton.setText("Decline Order");
        declineOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                declineOrderButtonActionPerformed(evt);
            }
        });

        updateTrackingButton.setBackground(new java.awt.Color(97, 175, 239));
        updateTrackingButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        updateTrackingButton.setText("Update Status");
        updateTrackingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateTrackingButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(goBackLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(620, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(updateTrackingButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(acceptOrderButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(declineOrderButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(verifySignatureButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(42, 42, 42))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(goBackLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(acceptOrderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updateTrackingButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(declineOrderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(verifySignatureButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 438, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void goBackLabelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_goBackLabelMouseReleased
        this.setVisible(false);
        distributorPage.setVisible(true);
        //comeFromPage.setVisible(true);
    }//GEN-LAST:event_goBackLabelMouseReleased

    private void verifySignatureButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verifySignatureButtonActionPerformed
        if(verifyManufacturerOrderData()){
            JOptionPane.showMessageDialog(null, "Order Transaction Data is correct!!");
        }
        else{
            JOptionPane.showMessageDialog(null, "Order Transaction Data has been altered", "Data Incorrect", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_verifySignatureButtonActionPerformed

    private void acceptOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptOrderButtonActionPerformed
        setVisible(false);
        acceptShippment.setVisible(true);
    }//GEN-LAST:event_acceptOrderButtonActionPerformed

    private void declineOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_declineOrderButtonActionPerformed
        String message = JOptionPane.showInputDialog("Why reject the order?");
        if (message != null) {
            if (message.isEmpty()) {
                message = "Order has been rejected";
            }
            Date today = new Date();
            Order currentOrder = getCurrentOrder();
            ReadyShippingDetails currentReadyShippingDetail = getCurrentReadyShippingDetail();
            ConfirmShipping shippingStatus = new ConfirmShipping(
                    current_user.getUserName(),
                    "N/A",
                    currentOrder.getDate(),
                    currentOrder.getOrder_batch_id(),
                    currentReadyShippingDetail.getStoringTemperature(),
                    "N/A",
                    "N/A",
                    "N/A",
                    Constant.SHIPMENT_REJECTED,
                    message,
                    dateFormat.format(today)
            );
            String hashUserName = Hasher.hash(current_user.getUserName(), "SHA-256");
            MySignature digitalSignature = new MySignature(hashUserName);
            shippingStatus.setDigitalSignature(digitalSignature.sign(shippingStatus.toString()));
            updateShippingToBlock(distributorPage.selectedBlock.getHeader().getBatch_id(), shippingStatus, null);
            setStatusTrackTextArea(statusTrackTextArea.getText() + "\n" + shippingStatus.statusTrackToString());
            distributorViewOrderPage.declineOrderButton.setVisible(false);
            distributorViewOrderPage.acceptOrderButton.setVisible(false);
            distributorViewOrderPage.verifySignatureButton.setVisible(false);
            distributorViewOrderPage.updateTrackingButton.setVisible(false);
        }
    }//GEN-LAST:event_declineOrderButtonActionPerformed

    private void updateTrackingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateTrackingButtonActionPerformed
        updateShippingStatus.resetInput();
        setVisible(false);
        updateShippingStatus.setVisible(true);

    }//GEN-LAST:event_updateTrackingButtonActionPerformed

    public void updateShippingToBlock(long batch_ID, Object tranx, String clinic){
        boolean isBlockFound = false;
        String previousHash = "";
        for(Block block : Blockchain.DB){
            if(!isBlockFound){
                if(batch_ID == block.getHeader().getBatch_id()){
                    block.getTranx().getTranxLst().add(tranx);
                    block.getHeader().setTimeStamp(new Timestamp( System.currentTimeMillis() ).getTime());
                    MerkleTree mt = MerkleTree.getInstance( block.getTranx().getTranxLst() );
                    mt.build();
                    block.getHeader().setMerkleRootStr(mt.getRoot());
                    block.getHeader().setCurrentHash(null);
                    if(clinic != null){
                        block.getHeader().getInvolvedPerson().add(clinic);
                    }
                    byte[] blockBytes = getBytes( block );
                    block.getHeader().setCurrentHash(Hasher.hash(blockBytes, "SHA-256"));

                    isBlockFound = true;
                    previousHash = block.getHeader().getCurrentHash();
                }
            }
            else{
                block.getHeader().setPreviousHash(previousHash);
                block.getHeader().setCurrentHash(null);
                byte[] blockBytes = getBytes( block );
                block.getHeader().setCurrentHash(Hasher.hash(blockBytes, "SHA-256"));
                previousHash = block.getHeader().getCurrentHash();
            }
        }
        Blockchain.persist();
        Blockchain.distribute();
    }

    private byte[] getBytes( Block block ){

        try(ByteArrayOutputStream baos = new ByteArrayOutputStream();
            ObjectOutputStream out = new ObjectOutputStream( baos );
        ) {
            out.writeObject( block );
            return baos.toByteArray();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }

    }

    private boolean verifyManufacturerOrderData(){
        boolean isDataCorrect = false;
        Block selectedBlock = distributorPage.selectedBlock;
        for(Object readyShippingDetail : selectedBlock.getTranx().getTranxLst()){
            if(readyShippingDetail instanceof ReadyShippingDetails){
                String hashUserName = Hasher.hash(((ReadyShippingDetails) readyShippingDetail).getFrom(), "SHA-256");
                MySignature digitalSignature = new MySignature(hashUserName);
                isDataCorrect = digitalSignature.verify(readyShippingDetail.toString(), ((ReadyShippingDetails) readyShippingDetail).getDigital_signature());
                break;
            }
        }
        return isDataCorrect;
    }

    public Order getCurrentOrder(){
        List<Object> transactionList =  distributorPage.selectedBlock.getTranx().getTranxLst();
        Order currentOrder = null;
        for (Object tranx: transactionList ){
            if(tranx instanceof Order){
                currentOrder = (Order) tranx;
                break;
            }
        }
        return currentOrder;
    }

    public ReadyShippingDetails getCurrentReadyShippingDetail(){
        List<Object> transactionList =  distributorPage.selectedBlock.getTranx().getTranxLst();
        ReadyShippingDetails currentReadyShipping = null;
        for (Object tranx: transactionList ){
            if(tranx instanceof ReadyShippingDetails){
                currentReadyShipping = (ReadyShippingDetails) tranx;
                break;
            }
        }
        return currentReadyShipping;
    }



    public void setStatusTrackTextArea(String data){
        statusTrackTextArea.setText(data);
    }

    public void setInfoTextArea(String data){
        infoTextArea.setText(data);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DistributorViewOrderPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DistributorViewOrderPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DistributorViewOrderPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DistributorViewOrderPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DistributorViewOrderPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton acceptOrderButton;
    public javax.swing.JButton declineOrderButton;
    private javax.swing.JLabel goBackLabel;
    public javax.swing.JTextArea infoTextArea;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JTextArea statusTrackTextArea;
    public javax.swing.JButton updateTrackingButton;
    public javax.swing.JButton verifySignatureButton;
    // End of variables declaration//GEN-END:variables
}
